using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SCTBuilder
{
    public class RomanSimplex
    {
        // Initialize jagged array of Simplex font vectors
        // At Scale = 1, 1 unit = 30 seconds DMS
        // First value is # of vectors, second is width
        public static int[][] Simplex = new int[][]
        {
            // 0 Ascii 32 (<space>)
            new int[] { 0, 16 },
            // Ascii 33 (!)
            new int[] {8, 10,
                    5,21, 5,7, -1,-1, 5,2, 4,1, 5,0, 6,1, 5,2},
            // Ascii 34 (")
            new int[] {5, 16,
                    4,21, 4,14, -1,-1, 12,21, 12,14},
            // Ascii 35 (#)
            new int[] {11, 21,
                    11,25, 4,-7, -1,-1, 17,25, 10,-7, -1,-1, 4,12, 18,12, -1,-1, 3,6, 17,6},
            // Ascii 36 ($)
            new int[] {26, 20,
                    8,25, 8,-4, -1,-1, 12,25, 12,-4, -1,-1, 17,18, 15,20, 12,21, 8,21,
                    5,20, 3,18, 3,16, 4,14, 5,13, 7,12, 13,10, 15,9, 16,8, 17,6,
                    17,3, 15,1, 12,0, 8,0, 5,1, 3,3},
            // 5 Ascii 37 (%)
            new int[] {31, 24,
                    21,21, 3,0, -1,-1, 8,21, 10,19, 10,17, 9,15, 7,14, 5,14, 3,16,
                    3,18, 4,20, 6,21, 8,21, 10,20, 13,19, 16,19, 19,20, 21,21, -1,-1,
                    17,7, 15,6, 14,4, 14,2, 16,0, 18,0, 20,1, 21,3, 21,5, 19,7, 17,7},
            // Ascii 38 (&)
            new int[] {34, 26,
                    23,12, 23,13, 22,14, 21,14, 20,13, 19,11, 17,6, 15,3, 13,1, 11,0,
                    7,0, 5,1, 4,2, 3,4, 3,6, 4,8, 5,9, 12,13, 13,14, 14,16, 14,18,
                    13,20, 11,21, 9,20, 8,18, 8,16, 9,13, 11,10, 16,3, 18,1, 20,0,
                    22,0, 23,1, 23,2},
            // Ascii 39 (')
            new int[] {7, 10,
                    5,19, 4,20, 5,21, 6,20, 6,18, 5,16, 4,15 },
            // Ascii 40 ( ( )
            new int[] {10,14,
                    11,25, 9,23, 7,20, 5,16, 4,11, 4,7, 5,2, 7,-2, 9,-5, 11,-7},
            // Ascii 41 ( ) )
            new int[] { 10, 14,
                    3,25, 5,23, 7,20, 9,16,  10,11, 10,7, 9,2, 7,-2, 5,-5, 3,-7},
            // 10 Ascii 42 (*)
            new int[] { 8, 16,
                     8,21, 8,9, -1,-1, 3,18, 13,12, -1,-1, 13,18, 3,12 },
            // Ascii 43 (+)
            new int[] { 5, 26,
                    13,18, 13,0, -1,-1, 4,9, 22,9},
            // Ascii 44 (,)
            new int[] { 8,10,
                    6,1, 5,0, 4,1, 5,2, 6,1, 6,-1, 5,-3, 4,-4},
            // Ascii 45 (-)
            new int[] { 2, 26,
                    4, 9, 22,9},
            //Ascii 46 (.)
            new int[] { 5, 10,
                    5,2, 4,1, 5,0, 6,1, 5,2},
            // 15 Ascii 47 (/)
            new int[] { 2, 22, 20,25, 2,-7},
            // Ascii 48 (0)
            new int[] { 17, 20,
                    9,21, 6,20, 4,17, 3,12, 3,9, 4,4, 6,1, 9,0, 11,0, 14,1,
                    16,4, 17,9, 17,12, 16,17, 14,20, 11,21, 9,21},
            // Ascii 49 (1)
            new int[] { 4,20,
                    6,17, 8,18, 11,21, 11,0},
            // Ascii 50 (2)
            new int[] { 14, 20,
                    4,16, 4,17, 5,19, 6,20, 8,21, 12,21, 14,20, 15,19, 16,17, 16,15, 15,13,
                    13,10, 3,0, 17,0},
            // Ascii 51 (3)
            new int[] {15, 20,
                    5,21, 16,21, 10,13, 13,13, 15,12, 16,11, 17,8, 17,6, 16, 3, 14,1, 11,0,
                    8,0, 5,1, 4,2, 3,4},
            // 20 Ascii 52 (4)
            new int[] {6, 20,
                    13,21, 3,7, 18,7, -1,-1, 13,21, 13,0 },
            // Ascii 53 (5)
            new int[] {17, 20,
                    15,21, 5,21, 4,12, 5,13, 8,14, 11,14, 14,13, 16,11, 17,8, 17,6,
                    16,3, 14,1, 11,0, 8,0, 5,1, 4,2, 3,4 },
            // Ascii 54 (6)
            new int[] {23, 20,
                    16,18, 15,20, 12,21, 10,21, 7,20, 5,17, 4,12, 4,7, 5,3, 7,1,
                    10,0, 11,0, 14,1, 16,3, 17,6, 17,7, 16,10, 14,12, 11,13, 10,13,
                    7,12, 5,10, 4,7},
            // Ascii 55 (7)
            new int[] {5, 20,
                17,21, 7,0, -1,-1, 3,21, 17,21},
            // Ascii 56 (8)
            new int[] {29, 20,
                    8,21, 5,20, 4,18, 4,16, 5,14, 7,13, 11,12, 14,11, 16,9, 17,7,
                    17,4, 16,2, 15,1, 12,0, 8,0, 5,1, 4,2, 3,4, 3,7, 4,9,
                    6,11, 9,12, 13,13, 15,14, 16,16, 16,18, 15,20, 12,21, 8,21 },
            // 25 Ascii 57 (9)
            new int[] {23, 20,
                    16,14, 15,11, 13,9, 10,8, 9,8, 6,9, 4,11, 3,14, 3,15, 4,18,
                    6,20, 9,21, 10,21, 13,20, 15,18, 16,14, 16,9, 15,4, 13,1, 10,0,
                    8,0, 5,1, 4,3 },
            // Ascii 58 (:)
            new int[] {11, 10,
                    5,14, 4,13, 5,12, 6,13, 5,14, -1,-1, 5,2, 4,1, 5,0, 6,1, 5,2 },
            // Ascii 59 (;)
            new int[] {14, 10,
                    5,14, 4,13, 5,12, 6,13, 5,14, -1,-1, 6,1, 5,0, 4,1, 5,2, 6,1,
                    6,-1, 5,-3, 4,-4 },
            // Ascii 60 (<)
            new int[] {3, 24, 20,18, 4, 9, 20, 0 },
            // Ascii 61 (=)
            new int[] {5, 26, 4,12, 22,12, -1,-1, 4,6, 22,6 },
            // 30 Ascii 62 (>)
            new int[] {3, 24, 4,18, 20,9, 4,0 },
            // Ascii 63 (?)
            new int[] {20, 18,
                    3,16, 3,17, 4,19, 5,20, 7,21, 11,21, 13,20, 14,19, 15,17, 15,15,
                    14,13, 13,12, 9,10, 9, 7, -1,-1, 9,2, 8,1, 9,0, 10,1, 9,2 },
            // Ascii 64 (@)
            new int[] {55,27,
                   18,13,17,15,15,16,12,16,10,15, 9,14, 8,11, 8, 8, 9, 6,11, 5,14, 5,16,
                    6,17, 8,-1,-1,12,16,10,14, 9,11, 9, 8,10, 6,11, 5,-1,-1,18,16,17, 8,
                   17, 6,19, 5,21, 5,23, 7,24,10,24,12,23,15,22,17,20,19,18,20,15,21,12,
                   21, 9,20, 7,19, 5,17, 4,15, 3,12, 3, 9, 4, 6, 5, 4, 7, 2, 9, 1,12, 0,
                   15, 0,18, 1,20, 2,21, 3,-1,-1,19,16,18, 8,18, 6,19, 5 },
            // Ascii 65 (A)
            new int[] {8,18,
                    9,21, 1, 0,-1,-1, 9,21,17, 0,-1,-1, 4, 7,14, 7},
            // Ascii 66 (B)
            new int[] {23,21,
                    4,21, 4, 0,-1,-1, 4,21,13,21,16,20,17,19,18,17,18,15,17,13,16,12,13,
                   11,-1,-1, 4,11,13,11,16,10,17, 9,18, 7,18, 4,17, 2,16, 1,13, 0, 4, 0 },
            // 35 Ascii 67 (C)
            new int[] {18,21,
                   18,16,17,18,15,20,13,21, 9,21, 7,20, 5,18, 4,16, 3,13, 3, 8, 4, 5, 5,
                    3, 7, 1, 9, 0,13, 0,15, 1,17, 3,18, 5 },
            // Ascii 68 (D)
            new int[] {15,21,
                    4,21, 4, 0,-1,-1, 4,21,11,21,14,20,16,18,17,16,18,13,18, 8,17, 5,16,
                    3,14, 1,11, 0, 4, 0 },
            // Ascii 69 (E)
            new int[] {11,19,
                    4,21, 4, 0,-1,-1, 4,21,17,21,-1,-1, 4,11,12,11,-1,-1, 4, 0,17, 0 },
            // Ascii 70 (F)
            new int[] {8,18,
                    4,21, 4, 0,-1,-1, 4,21,17,21,-1,-1, 4,11,12,11 },
            // Ascii 71 (G)
            new int[] {22,21,
                   18,16,17,18,15,20,13,21, 9,21, 7,20, 5,18, 4,16, 3,13, 3, 8, 4, 5, 5,
                    3, 7, 1, 9, 0,13, 0,15, 1,17, 3,18, 5,18, 8,-1,-1,13, 8,18, 8 },
            // 40 Ascii 72 (H)
            new int[] {    8,22,
                    4,21, 4, 0,-1,-1,18,21,18, 0,-1,-1, 4,11,18,11 },
            // Ascii 73 (I)
            new int[] {2, 8, 4,21, 4, 0 },
            // Ascii 74 (J)
            new int[] {10,16,
                12,21,12, 5,11, 2,10, 1, 8, 0, 6, 0, 4, 1, 3, 2, 2, 5, 2, 7 },
            // Ascii 75 (K)
            new int[] {8,21, 4,21, 4, 0,-1,-1,18,21, 4, 7,-1,-1, 9,12,18, 0 },
            // Ascii 76 (L)
            new int[] {5,17, 4,21, 4, 0,-1,-1, 4, 0,16, 0},
            // 45 Ascii 77 (M)
            new int[] {11,24,
                    4,21, 4, 0,-1,-1, 4,21,12, 0,-1,-1,20,21,12, 0,-1,-1,20,21,20, 0 },
            // Ascii 78 (N)
            new int[] { 8,22,
                4,21, 4, 0,-1,-1, 4,21,18, 0,-1,-1,18,21,18, 0},
            // Ascii 79 (O)
            new int[] {21,22,
                    9,21, 7,20, 5,18, 4,16, 3,13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0,13, 0,15,
                    1,17, 3,18, 5,19, 8,19,13,18,16,17,18,15,20,13,21, 9,21 },
            // Ascii 80 (P)
            new int[] {13,21,
                    4,21, 4, 0,-1,-1, 4,21,13,21,16,20,17,19,18,17,18,14,17,12,16,11,13,
                   10, 4,10 },
            // Ascii 81 (Q)
            new int[] {24,22,
                    9,21, 7,20, 5,18, 4,16, 3,13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0,13, 0,15,
                    1,17, 3,18, 5,19, 8,19,13,18,16,17,18,15,20,13,21, 9,21,-1,-1,12, 4,
                   18,-2 },
            // 50 Ascii 82 (R)
            new int[] {16,21,
                    4,21, 4, 0,-1,-1, 4,21,13,21,16,20,17,19,18,17,18,15,17,13,16,12,13,
                   11, 4,11,-1,-1,11,11,18, 0 },
            // Ascii 83 (S)
            new int[] {20, 20,
                   17,18,15,20,12,21, 8,21, 5,20, 3,18, 3,16, 4,14, 5,13, 7,12,13,10,15,
                    9,16, 8,17, 6,17, 3,15, 1,12, 0, 8, 0, 5, 1, 3, 3},
            // Ascii 84 (T)
            new int[] {5,16, 8,21, 8, 0,-1,-1, 1,21,15,21 },
            // Ascii 85 (U)
            new int[] {10,22,
                    4,21, 4, 6, 5, 3, 7, 1,10, 0,12, 0,15, 1,17, 3,18, 6,18,21 },
            // Ascii 86 (V)
            new int[] {5,18, 1,21, 9, 0,-1,-1,17,21, 9, 0 },
            // 55 Ascii 87 (W)
            new int[] {11,24,
                    2,21, 7, 0,-1,-1,12,21, 7, 0,-1,-1,12,21,17, 0,-1,-1,22,21,17, 0 },
            // Ascii 88 (X)
            new int[] {5,20, 3,21,17, 0,-1,-1,17,21, 3, 0 },
            // Ascii 89 (Y)
            new int[] {6,18, 1,21, 9,11, 9, 0,-1,-1,17,21, 9,11 },
            // Ascii 90 (Z)
            new int[] {8,20, 17,21, 3, 0,-1,-1, 3,21,17,21,-1,-1, 3, 0,17, 0 },
            // Ascii 91 ([)
            new int[] {11,14, 4,25, 4,-7,-1,-1, 5,25, 5,-7,-1,-1, 4,25,11,25,-1,-1, 4,-7,11,-7 },
            // 60 Ascii 92 (\)
            new int[] {2,14, 0,21,14,-3 },
            // Ascii 93 (])
            new int[] {11,14, 9,25, 9,-7,-1,-1,10,25,10,-7,-1,-1, 3,25,10,25,-1,-1, 3,-7,10,-7 },
            // Ascii 94 (^)
            new int[] {10,16, 6,15, 8,18,10,15,-1,-1, 3,12, 8,17,13,12,-1,-1, 8,17, 8, 0 },
            // Ascii 95 (_)
            new int[] {2,16, 0,-2, 16,-2 },
            // Ascii 96 (`)
            new int[] {7,10, 6,21, 5,20, 4,18, 4,16, 5,15, 6,16, 5,17 },
            // 65 Ascii 97 (a)
            new int[] {17,19,
                    15,14,15, 0,-1,-1,15,11,13,13,11,14, 8,14, 6,13, 4,11, 3, 8, 3, 6, 4,
                    3, 6, 1, 8, 0,11, 0,13, 1,15, 3 },
            // Ascii 98 (b)
            new int[] {17,19,
                    4,21, 4, 0,-1,-1, 4,11, 6,13, 8,14,11,14,13,13,15,11,16, 8,16, 6,15,
                    3,13, 1,11, 0, 8, 0, 6, 1, 4, 3 },
            // Ascii 99 (c)
            new int[] {14,18,
                   15,11,13,13,11,14, 8,14, 6,13, 4,11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0,11,
                    0,13, 1,15, 3 },
            // Ascii 100 (d)
            new int[] {17,19,
                   15,21,15, 0,-1,-1,15,11,13,13,11,14, 8,14, 6,13, 4,11, 3, 8, 3, 6, 4,
                    3, 6, 1, 8, 0,11, 0,13, 1,15, 3 },
            // Ascii 101 (e)
            new int[] {17,18,
                    3, 8,15, 8,15,10,14,12,13,13,11,14, 8,14, 6,13, 4,11, 3, 8, 3, 6, 4,
                    3, 6, 1, 8, 0,11, 0,13, 1,15, 3 },
            // 70 Ascii 102 (f)
            new int[] {8,12, 10,21, 8,21, 6,20, 5,17, 5, 0,-1,-1, 2,14, 9,14 },
            // Ascii 103 (g)
            new int[] {22,19,
                   15,14,15,-2,14,-5,13,-6,11,-7, 8,-7, 6,-6,-1,-1,15,11,13,13,11,14, 8,
                   14, 6,13, 4,11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0,11, 0,13, 1,15, 3 },
            // Ascii 104 (h)
            new int[] {10,19,
                    4,21, 4, 0,-1,-1, 4,10, 7,13, 9,14,12,14,14,13,15,10,15, 0 },
            // Ascii 105 (i)
            new int[] {8, 8,
                    3,21, 4,20, 5,21, 4,22, 3,21,-1,-1, 4,14, 4, 0 },
            // Ascii 106 (j)
            new int[] {11,10,
                    5,21, 6,20, 7,21, 6, 22, 5,21,-1,-1, 6,14, 6,-3, 5,-6, 3,-7, 1,-7 },
            // 75 Ascii 107 (k)
            new int[] {8,17, 4,21, 4, 0,-1,-1,14,14, 4, 4,-1,-1, 8, 8,15, 0 },
            // Ascii 108 (l)
            new int[] {2, 8, 4,21, 4, 0 },
            // Ascii 109 (m)
            new int[] {18,30,
                    4,14, 4, 0,-1,-1, 4,10, 7,13, 9,14,12,14,14,13,15,10,15, 0,-1,-1,15,
                   10,18,13,20,14,23,14,25,13,26,10,26, 0 },
            // Ascii 110 (n)
            new int[] {10,19,
                    4,14, 4, 0,-1,-1, 4,10, 7,13, 9,14,12,14,14,13,15,10,15, 0 },
            // Ascii 111 (o)
            new int[] {17,19,
                    8,14, 6,13, 4,11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0,11, 0,13, 1,15, 3,16,
                    6,16, 8,15,11,13,13,11,14, 8,14 },
            // 80 Ascii 112 (p)
            new int[] {17,19,
                    4,14, 4,-7,-1,-1, 4,11, 6,13, 8,14,11,14,13,13,15,11,16, 8,16, 6,15,
                    3,13, 1,11, 0, 8, 0, 6, 1, 4, 3 },
            // Ascii 113 (q)
            new int[] {17,19,
                   15,14,15,-7,-1,-1,15,11,13,13,11,14, 8,14, 6,13, 4,11, 3, 8, 3, 6, 4,
                    3, 6, 1, 8, 0,11, 0,13, 1,15, 3 },
            // Ascii 114 (r)
            new int[] {8,13, 4,14, 4, 0,-1,-1, 4, 8, 5,11, 7,13, 9,14,12,14 },
            // Ascii 115 (s)
            new int[] {17,17,
                   14,11,13,13,10,14, 7,14, 4,13, 3,11, 4, 9, 6, 8,11, 7,13, 6,14, 4,14,
                    3,13, 1,10, 0, 7, 0, 4, 1, 3, 3 },
            // Ascii 116 (t)
            new int[] {8,12, 5,21, 5, 4, 6, 1, 8, 0,10, 0,-1,-1, 2,14, 9,14 },
            // 85 Ascii 117 (u)
            new int[] {10,19,
                    4,14, 4, 4, 5, 1, 7, 0,10, 0,12, 1,15, 4,-1,-1,15,14,15, 0 },
            // Ascii 118 (v)
            new int[] {5,16, 2,14, 8, 0,-1,-1,14,14, 8, 0 },
            // Ascii 119 (w)
            new int[] {11,22,
                    3,14, 7, 0,-1,-1,11,14, 7, 0,-1,-1,11,14,15, 0,-1,-1,19,14,15, 0 },
            // Ascii 120 (x)
            new int[] {5,17, 3,14,14, 0,-1,-1,14,14, 3, 0 },
            // Ascii 121 (y)
            new int[] {9,16, 2,14, 8, 0,-1,-1,14,14, 8, 0, 6,-4, 4,-6, 2,-7, 1,-7 },
            // 90 Ascii 122 (z)
            new int[] {8,17, 14,14, 3, 0,-1,-1, 3,14,14,14,-1,-1, 3, 0,14, 0 },
            // Ascii 123 ({)
            new int[] {39,14,
                    9,25, 7,24, 6,23, 5,21, 5,19, 6,17, 7,16, 8,14, 8,12, 6,10,-1,-1, 7,
                   24, 6,22, 6,20, 7,18, 8,17, 9,15, 9,13, 8,11, 4, 9, 8, 7, 9, 5, 9, 3,
                    8, 1, 7, 0, 6,-2, 6,-4, 7,-6,-1,-1, 6, 8, 8, 6, 8, 4, 7, 2, 6, 1, 5,
                   -1, 5,-3, 6,-5, 7,-6, 9,-7 },
            // Ascii 124 (|)
            new int[] {2, 8, 4,25, 4,-7 },
            // Ascii 125 (})
            new int[] {39,14,
                    5,25, 7,24, 8,23, 9,21, 9,19, 8,17, 7,16, 6,14, 6,12, 8,10,-1,-1, 7,
                   24, 8,22, 8,20, 7,18, 6,17, 5,15, 5,13, 6,11,10, 9, 6, 7, 5, 5, 5, 3,
                    6, 1, 7, 0, 8,-2, 8,-4, 7,-6,-1,-1, 8, 8, 6, 6, 6, 4, 7, 2, 8, 1, 9,
                   -1, 9,-3, 8,-5, 7,-6, 5,-7 },
            // 94 Ascii 126 (~)
            new int[] { 23,24,
                    3,6, 3,8, 4,11, 6,12, 8,12, 10,11, 14,8, 16,7, 18,7, 20,8, 21,10,
                    -1,-1, 3,8, 4,10, 6,11, 8,11, 10,10, 14,7, 16,6, 18,6, 20,7, 21,10, 21,12},
        };
        public static int[][] Symbol = new int[][]
            {
            // 0 <4 point star>
            new int[] { 9, 30,
                    1,15, 12,18, 15,30, 18,18, 30,15, 18,12, 15,1, 12,12, 1,15},
            // 1 <5 point star>
            new int[] { 11, 30,
               1,18, 12,18, 15,30, 18,18, 30,18, 18,12, 23,1, 15,7, 7,1, 12,12, 1,18 },
            // 2 <Diamond>
            new int[] { 5, 30,
                1,15, 15,30, 30,15, 15,1, 1,15 },
            };
    }
    public class TextColors
    {
        public static string RWYTextColor { get; set; }
        public static string SSDTextColor { get; set; }
    }
    public class APTView
    {
        public string ID { get; set; }
        public string Name { get; set; }
        public string Latitude { get; set; }
        public string Longitude { get; set; }
        public string Frequency { get; set; }
    }
    public class FolderMgt
    {
        public static readonly string INIfile = ".\\SCTbuilder.ini";
        public static string DataFolder { get; set; }
        public static string OutputFolder { get; set; }
        // public static string OutputFilter{ get; set; }
    }
    public class VersionInfo                            // Internal information
    {
        public readonly static string Title = "SCT Builder 0.1";
    }
    public class FilterBy                               // Filter source for SCT2 output
    {
        public static string Method { get; set; }
        public static object Param1 { get; set; }
        public static object Param2 { get; set; }
        public static object Param3 { get; set; }
        public static object Param4 { get; set; }
    }
    public class InfoSection
    {
        private static readonly float NMlongitude = LatLongCalc.NMperLongDegree(DefaultCenterLatitude);
        private static readonly float centerLat = Conversions.DefaultLatitude(DefaultAirport);
        private static readonly float centerLong = Conversions.DefaultLongitude(DefaultAirport);
        private static readonly float magvar = Conversions.DefaultMagVar(DefaultAirport);

        public static string SectorName
        {
            get { return SponsorARTCC + "_" + CycleInfo.AIRAC.ToString(); }
        }
        public static string DefaultPosition    // Ignored by VRC
        {
            get
            {
                return SponsorARTCC + "_xx_OBS";
            }
        }
        public static string FacilityEngineer { get; set; }
        public static string AsstFacilityEngineer { get; set; }
        public static string SponsorARTCC { get; set; }
        public static string DefaultAirport { get; set; }   
        public static float DefaultCenterLatitude               // Latitude of default sector center point
        {
            get
            { return centerLat; }
        }
        public static float DefaultCenterLongitude  // Longitude of default sector center point
        {
            get
            { return centerLong; }
        }
        public static float NMperDegreeLatitude { get { return 60f; } } // Always 60 NM
        public static float NMperDegreeLongitude
        {
            get { return NMlongitude; }
        }
        public static float MagneticVariation       // Varies by location
        {
            get
            { return magvar; }
        }
        public static float SectorScale { get { return 1f; } }      // Always 1, ignored in VRC
    }
    public static class SCTchecked
    {
        public static bool chkARB { get; set; }
        public static bool chkAPT { get; set; }
        public static bool chkVOR { get; set; }
        public static bool chkNDB { get; set; }
        public static bool chkFIX { get; set; }
        public static bool chkAWY { get; set; }
        public static bool chkRWY { get; set; }
        public static bool chkSSD { get; set; }
    }
} 
